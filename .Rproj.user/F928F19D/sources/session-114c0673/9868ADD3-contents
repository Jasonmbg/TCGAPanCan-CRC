---
title: "TCGA RNASeq Analysis"
include-after-body: "footer.html"
format: 
 html:
  code-fold: true
  code-summary: "Show the code"
number-sections: true
author: Efstathios-Iason Vlachavas
date: last-modified
date-format: YYYY-MM-DD
toc: true
theme: "darkly"
editor: visual
warning: false
---

# TCGA PanCan-CRC dataset RNASeq analysis overview

### Reproduce the analysis of the rnaseq data from the TCGAPanCan-CRC dataset for the ACCC-CRC manuscript.

Initially start by loading the necessary R packages, along with importing the clinical information.

```{r}

library(data.table)
library(tidyverse)
library(maftools)
library(limma)
library(progeny)
library(dorothea)
library(decoupleR)
library(xml2)
library(downlit)
library(here)
library(ComplexHeatmap)
library(circlize)

# small initial step to merge the txt file of mutational group information, with the rest of the clinical data for the same 492 patients---> to create the final merged clinical file that will be used for all downstream analyses

dr_here()

clin.dat.final <- read_tsv(here("Data", "COAD.PanCan.cBioPortal.clinical.annot.final.492patients.tsv"))

clin.dat.final <- clin.dat.final %>% dplyr::rename(Tumor_Sample_Barcode='Patient ID')

mut.group.dat <- read_tsv(here("Data",
"PanCan.COAD.cBioP.MutGroup.492patients.final.txt"))

final.updated.merged.clin.mut.dat <- inner_join(clin.dat.final, mut.group.dat, by="Tumor_Sample_Barcode") # 492

# Final exclusion of samples that sharing only individual muts in genes other than KRAS/BRAF

final.updated.merged.clin.mut.dat.sub <- final.updated.merged.clin.mut.dat %>% filter(!Condition%in%c("ARAF_mut","CRAF_mut","GNAS_mut","HRAS_mut","NRAS_mut")) %>% 
filter(`Neoadjuvant Therapy Type Administered Prior To Resection Text`=="No") # 450

# and here save as the final-clinical phenotypic information
# write_tsv(final.updated.merged.clin.mut.dat.sub, "PanCan.CRC.Merged.Sub.450samples.Clin.Mut.tsv")

```

### Then load/pre-process/filter the rnaseq data

```{r}

load(here("Data","data_RNA_Seq_v2_expression_median.rda")) # for reduced size and memory constraints {it was the original data_RNA_Seq_v2_expression_median.txt saved as rda file}

rna.seq.dat <- rna.seq.dat %>% dplyr::select(-Entrez_Gene_Id)

# plyr::count(final.updated.merged.clin.mut.dat.sub$`Sample Type`)

final.updated.clin.mut.dat <- final.updated.merged.clin.mut.dat.sub %>% dplyr::rename(MSI_pred_MANTIS=`MSI MANTIS Score`) %>% mutate(MSI_status_MANTIS= case_when(
       MSI_pred_MANTIS > 0.6 ~"MSI",
       MSI_pred_MANTIS < 0.4 ~ "MSS",
        is.na(MSI_pred_MANTIS)~"NA",
        TRUE~"Indeterminate"))
# save it also to included the updated MSI coding scheme;
# write_tsv(final.updated.clin.mut.dat, file="PanCanTCGA.CRC.Clinical.MSIReform.MANTIS.MutStatus.450.tsv")

plyr::count(final.updated.clin.mut.dat$MSI_status_MANTIS)

# also define a combination group including MSI status with mutational group information to also be considered for non-specific filtering downstream
group_combo <- factor(paste(final.updated.clin.mut.dat$Condition, final.updated.clin.mut.dat$MSI_status_MANTIS, sep="_"))

final.updated.clin.mut.dat$Cond_combo <- group_combo

all_final_samples <- final.updated.clin.mut.dat$Tumor_Sample_Barcode

rna.seq.form <- rna.seq.dat %>% 
dplyr::filter(!is.na(Hugo_Symbol)) %>%
dplyr::distinct(Hugo_Symbol,.keep_all=TRUE) %>% 
column_to_rownames("Hugo_Symbol") 

grps.rna = gsub("-[0-1]{2}", "", colnames(rna.seq.form))

colnames(rna.seq.form) <- grps.rna

rna.seq.form <- rna.seq.form %>% dplyr::select(all_of(all_final_samples)) 

rna.seq.mat <- as.matrix(rna.seq.form) 

rna.seq.dat.clean <- na.omit(rna.seq.mat)

# processing and transform accordingly
if(max(rna.seq.dat.clean, na.rm=TRUE) > 50){
  ##Do log-transformation
  if(min(rna.seq.dat.clean,na.rm=TRUE) <= 0){
   rna.seq.dat.clean <- rna.seq.dat.clean - min(rna.seq.dat.clean,na.rm=TRUE) + 1
  }
  rna.seq.dat.clean <- log2(rna.seq.dat.clean)
}

y <- normalizeQuantiles(rna.seq.dat.clean)
keep <- rowSums(y > log2(11), na.rm = TRUE) >= 6 # as the lowest number of samples in the combined group that will be used is RAS_RAF_GNAS_wt_MSI; alternatively the MSI group is 42;
y2 <- y[keep,]

# OUTPUT into a txt file for prediction analysis regarding MSI status
exp.filt.norm.dat <- y2 %>% as.data.frame() %>% rownames_to_column("GeneID")

# write_tsv(exp.filt.norm.dat, file="TCGAPanCan.CRC.Exp.Norm.Filt.RNASeq.tsv")

## HERE-output saved for SVRACAS expressed genes to be used;
final.exp.genes.vec.tcga <- as.character(rownames(y2))
exp.dt.tcga.rnaseq.genes <- final.exp.genes.vec.tcga %>% as_tibble() %>% rename(ExpressedGenes.TCGA.PanCan.CRC.RNAseq=value)

# write_tsv(exp.dt.tcga.rnaseq.genes,"ExpressedGenes.TCGAPanCan.CRC.ACCCPaper.MSI.tsv")

```

## Proceed with DE analysis comparing MSI vs MSS patients

```{r}

pheno_MSI_group <- as.factor(final.updated.clin.mut.dat$MSI_status_MANTIS)

# define the comparison of MSI vs MSS

design <- model.matrix(~0 + pheno_MSI_group)
colnames(design) <- levels(pheno_MSI_group)

fit <- lmFit(y2, design)

contrast.matrix <- makeContrasts(comp1= MSI -MSS,
                                    levels=design)

fit2 <- contrasts.fit(fit, contrast.matrix)
fit3 <- eBayes(fit2,trend = TRUE, robust = TRUE)

comp1_stat <- limma::topTable(fit3, coef=1, number=nrow(fit3), adjust.method="fdr", sort.by="none") %>% dplyr::select(t)  %>% dplyr::rename(MSIvsMSS_stat=t)

total_stat_dat <-  comp1_stat %>% as.matrix()

```

## Perform relative Pathway activity analysis

```{r}

PathwayActivity_zscore <- progeny(total_stat_dat, 
    scale=TRUE, organism="Human", top = 100, perm = 10000, z_scores = TRUE) %>%
    t()
colnames(PathwayActivity_zscore) <- c("NES_MSIvsMSS")

Path.act.dat.tcga <- as.data.frame(PathwayActivity_zscore)
Path.act.dat.tcga <- Path.act.dat.tcga %>% rownames_to_column() %>%
                          dplyr::rename(PROGENY_pathways=rowname)

# write_tsv(Path.act.dat.tcga,file="PathwayActivity_zscore.PROGENY.PanCan.TCGA.MSIvsMSS.tsv")

PathwayActivity_zscore_df <- as.data.frame(PathwayActivity_zscore) %>% 
    rownames_to_column(var = "Pathway") %>%
    dplyr::arrange(NES_MSIvsMSS) %>%
    dplyr::mutate(Pathway = factor(Pathway))

ggplot(PathwayActivity_zscore_df,aes(x = reorder(Pathway, NES_MSIvsMSS), 
    y = NES_MSIvsMSS)) + 
    geom_bar(aes(fill = NES_MSIvsMSS), stat = "identity") +
    scale_fill_gradient2(low = "darkblue", high = "indianred", 
        mid = "whitesmoke", midpoint = 0) + 
    theme_minimal() +
    theme(axis.title = element_text(face = "bold", size = 12),
        axis.text.x = 
            element_text(angle = 45, hjust = 1, size =10, face= "bold"),
        axis.text.y = element_text(size =10, face= "bold"),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank()) +
    xlab("Pathways")


```

## And Finally TF-activity inference

```{r}

# PERFORM TF ACTIVITY ANALYSIS ON MSI VS MSS samples

# https://github.com/saezlab/kinase_tf_mini_tuto/blob/main/code/utils.R
 
plot_top_features <- function(data, n_top) {

  colnames(data) <- "value"

  arranged <- data %>%
    as.data.frame() %>%
    tibble::rownames_to_column(var = "id") %>%
    arrange(desc(value))

  top_up <- slice_head(arranged, n = n_top)
  top_down <- slice_tail(arranged, n = n_top)

  p <- bind_rows(list(up = top_up, down = top_down), .id = "status") %>%
    mutate(id = fct_inorder(id)) %>%
    ggplot(aes(x = value, y = id, fill = status)) +
    geom_bar(stat = "identity") +
    scale_fill_manual(values = c("up" = "red", "down" = "blue")) +
    theme_bw()

  return(p)

}

# First we import the dorothea regulons (using only confidence A, B, and C), see dorothea publication for information on confidence levels
dorothea_df <- as.data.frame(dorothea_hs[dorothea_hs$confidence %in% c("A","B","C"),c(3,1,4)])
dorothea_df$likelihood <- 1

dorothea_df <- intersect_regulons(as.matrix(comp1_stat), dorothea_df, .source = tf, .target = target, minsize=20) # use just one of the 3 stats to just compute the final presented TFs as expressed in the data

TF_activities_MSI_vs_MSS <- as.data.frame(run_wmean(mat = as.matrix(comp1_stat), network = dorothea_df, .source = "tf", .target = "target", times = 1000))

# for extra save with all information:
dat.TF_activities_MSI_vs_MSS <- TF_activities_MSI_vs_MSS %>% filter(statistic=="norm_wmean") %>% select(statistic,source,score,p_value)
# write_tsv(dat.TF_activities_MSI_vs_MSS, file="PanCanTCGA.CRC.TFact.MSI_vs_MSS.RES.TotalTable.tsv")

TF_activities_MSI_vs_MSS <- TF_activities_MSI_vs_MSS[TF_activities_MSI_vs_MSS$statistic == "norm_wmean",c(2,4)] %>% as_tibble() %>% column_to_rownames(var="source")

# OPTIONAL for below:
out.TF_activities_MSI_vs_MSS <- TF_activities_MSI_vs_MSS %>% rownames_to_column(var="Dorothea_TF")
# write_tsv(out.TF_activities_MSI_vs_MSS, file="TFact.Dorothea.PanCanTCGA.CRC.MSI_vs_MSS.tsv")

plot_top_features(TF_activities_MSI_vs_MSS, n_top = 10) +
  ggtitle('TF top10 activities MSI_vs_MSS')

```

<button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne">

Session Information

</button>

::: {#collapseOne .accordion-collapse .collapse}
<div>

```{r}
sessioninfo::session_info()
```

</div>
:::
